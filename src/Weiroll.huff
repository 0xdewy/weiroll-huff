#define function execute(bytes32[],bytes[]) nonpayable returns ()

// Memory layout
#define constant MEM_MSG_VALUE = 0x00
#define constant CALLDATA_STATE_POINTER = 0x20
#define constant MEM_STATE_POINTER = 0x40
#define constant MEM_STATE_START = 0x60

#define constant ONE_BYTE = 0xFF

// 4 byte function signature
#define constant FUNC_SIG_MASK = 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000
#define constant SIG_OFFSET = 0xE0  // 224 bits

// 1 byte flag mask
#define constant FUNC_FLAG_MASK = 0x00000000FF000000000000000000000000000000000000000000000000000000
#define constant FLAG_OFFSET = 0xD8  // 216 bits

// 6 byte input mask
#define constant FUNC_INPUT_MASK = 0x0000000000FFFFFFFFFFFF000000000000000000000000000000000000000000
#define constant INPUT_OFFSET = 0xA8  // 168 bits
#define constant INPUT_INDEX_OFFSET = 0x28  // Offset to access first input. Decrese by 8


// mask to get the 1 byte output field between the input field and target address
#define constant FUNC_OUT_MASK = 0x0000000000000000000000FF0000000000000000000000000000000000000000
#define constant OUTPUT_OFFSET = 0xA0  // 160 bits

// mask to get the 20 byte target address field after the output field
#define constant FUNC_ADDR_MASK = 0x000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

// Flag masks
#define constant FLAG_RESERVED = 0x3F // 0b00111111
#define constant FLAG_CALLTYPE = 0x01  // 0b00000001

// Flag values
#define constant FLAG_CT_DELEGATECALL = 0x00
#define constant FLAG_CT_CALL = 0x01  // 0b00000001
#define constant FLAG_CT_STATICCALL = 0x02  // 0b00000010
#define constant FLAG_CT_VALUECALL = 0x03  // 0b00000011
#define constant FLAG_CT_MASK = 0x03 // 0b00000011
#define constant FLAG_EXTENDED_COMMAND = 0x40 // 0b01000000
#define constant FLAG_TUPLE_RETURN = 0x80 // 0b10000000


// Input masks
#define constant INPUT_VARIABLE_LENGTH = 0x80 // 0b10000000
#define constant INPUT_USE_RETURN_VAR = 0x40  // 0b01000000
#define constant INPUT_INDEX_MASK = 0x3F // 0b01111111

// Input values
#define constant END_OF_ARGS = 0xFF // 0b11111111
#define constant USE_STATE = 0xFE // 0b11111110

// subs 8 from the top of the stack
#define macro SUB_8() = takes (0) returns (0) {
    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8 add
}

#define macro GET_STATE_MEMORY_LOCATION() = takes (1) returns (1) {
    // [outputIndex]
    0x20 mul                  // [indexOffset]
    [MEM_STATE_START]         // [stateMemLocation, indexOffset]
    add                       // [stateMemLocation + outputIndex]
}

#define macro GET_INPUT_VALUE_FROM_STATE() = takes (1) returns (1) {
      // [input]
      // Get index and apply offset
      dup1 [INPUT_INDEX_MASK] and  // [index, input]

      // if useReturnVarFlag is set, read from memory
      swap1 [INPUT_USE_RETURN_VAR] and // [useReturnVarFlag, index ]

      iszero read_calldata jumpi

    read_memory:  // [indexOffset]
      GET_STATE_MEMORY_LOCATION() // [stateMemLocation]
      mload                               // [stateValue]
      finish jump

    // TODO: find more efficient way to access calldata state
    read_calldata:  // Stack: [index]
      // Fetch state from calldata at index on stack
      // 0x01 add                                       // [++index]
      0x05 shl                                      // [++index * 32]
      // Load beginning of calldata state
      [CALLDATA_STATE_POINTER] mload                // [stateCalldataLocation, indexOffset]
      // Add index offset to state location
      add                                          // [stateCalldataLocation + indexOffset]
      // Read number of bytes of state variable
      dup1 calldataload                             // [stateVar1NumBytes, stateCalldataLocation + indexOffset]
      add                                         // [stateCalldataLocation + indexOffset + stateVar1NumBytes]
      calldataload                                // [stateVar]

    finish:

}

#define macro STORE_SELECTOR() = takes (2) returns (3) {
    // Inputs: [inputs, command]         Output: [calldata]

    // Get free memory location
    [MEM_STATE_POINTER] mload                 // [memStart, inputs, command]

    // Mask command to get function selector
    dup3 [FUNC_SIG_MASK] and             // [selector, memStart, inputs, command]

    dup2 mstore                           // [memStart, inputs, command]

    // Increase free memory pointer by 4 bytes and keep it in stack
    0x04 add       // [memEnd, inputs, command]

}

#define macro PREPARE_INPUTS_WITH_MSG_VALUE() = takes (2) returns  (6) {
    // Inputs: [inputs, command]         Output: [calldata]

    // Store the function selector at free memory
    STORE_SELECTOR() // [memEnd, inputs, command]

    // Bitshift inputs to get first input
    dup2 [INPUT_INDEX_OFFSET] shr     // [input, memEnd, inputs, command]

    // Store msg.value at memory 0x0
    0x00 mstore       // [memEnd, inputs, command]

    // Get second input
    dup2 0x20 shr     // [input, memEnd, inputs, command]

    // Push index onto stack
    [INPUT_INDEX_OFFSET]              // [index, input, memEnd, inputs, command]
    swap2 swap1       // [input, memEnd, index, inputs, command]
}

// Store fn selector and setup inputs for encoding
#define macro PREPARE_INPUTS() = takes (2) returns  (6) {
    // Inputs: [inputs, command]         Output: [calldata]

    STORE_SELECTOR() // [memEnd, inputs, command]
    
    // Get first input
    dup2 [INPUT_INDEX_OFFSET] shr     // [input, memEnd, inputs, command]

    // Push index onto stack
    [INPUT_INDEX_OFFSET]              // [index, input, memEnd, inputs, command]
    swap2 swap1       // [input, memEnd, index, inputs, command]
}

#define macro BUILD_INPUTS() = takes (6) returns (6) {
    // Inputs: [input, memEnd, index, inputs, command]
    encode_loop: // [input, memEnd ..] 
      // check if finished
      dup1 [END_OF_ARGS] eq pre_encode_call jumpi
      // check if input variable is fixed length (uint, bytes32, address, bool)
      dup1 [INPUT_VARIABLE_LENGTH] and iszero fixed_length jumpi // [input, memEnd...]
      // TODO: variable length input unimplemented
      0x00 0x00 revert

    fixed_length:  // [input, memEnd, index, inputs, command]
      GET_INPUT_VALUE_FROM_STATE() // [inputValue, memEnd, index, inputs, command]

      // Store state value in next slot of memory available for this call
      dup2 mstore  // [memEnd, index, inputs, command]

      // Increase free memory pointer by 32 bytes and keep it in stack
      0x20 add    // [memEnd, index, inputs, command]
      swap1       // [index, memEnd, inputs, command]
      
      // Check if loop finished, otherwise decrease index by 8 bits (i--)
      dup1 iszero encode_call jumpi
      SUB_8()      // [index+1, memEnd, inputs, command]
      swap1        // [memEnd, index+1, inputs, command]

      // Get next input by shifting inputs by index and masking with 0xFF
      dup3 dup3 shr // [input, memEnd, index+1, inputs, command]
      [ONE_BYTE] and // [input, memEnd, index+1, inputs, command]

      encode_loop jump

    pre_encode_call:  // [input, memEnd, index, inputs, command]
      pop
      swap1          // [index, memEnd, inputs, command]

    encode_call:      // [index, memEnd, inputs, command]
    pop   // [memEnd, inputs, command]

    // Get length of data
    [MEM_STATE_POINTER] mload                         // [memStart, memEnd, inputs, command]
    swap1 sub                                         // [memSize, inputs, command] 
    dup3 [FUNC_OUT_MASK] and [OUTPUT_OFFSET] shr      // [outputs, memSize, inputs, command]

    // Check if output is needed
    dup1 0xFF eq no_output jumpi // [outputs, memSize, inputs, command]

    // TODO: check for dynamic output length
    // TODO: USE_STATE not implemented

    // Get state location where output should be stored
    GET_STATE_MEMORY_LOCATION() // [outputLocation, memSize, inputs, command]
    0x20                        // [outputSize, outputLocation, memSize, inputs, command]
    swap2                       // [memSize, outputLocation, outputSize, inputs, command]

    // return size 
    [MEM_STATE_POINTER] mload                        // [memStart, memSize, outputLocation, outputSize, inputs, command]

    // Update state free memory pointer (output will take up current spot)
    dup1 0x20 add [MEM_STATE_POINTER] mstore                  // [memStart, memSize, outputLocation, outputSize, inputs, command]

    finish_encoding jump


    no_output:   // [outputs, memSize, inputs, command]
      pop                                               // [memSize, inputs, command]
      0x00 0x00                                         // [outputSize, outputLocation, memSize, inputs, command]
      swap2                                             // [memSize, outputLocation, outputSize, inputs, command]
      [MEM_STATE_POINTER] mload                        // [memStart, memSize, outputLocation, outputSize, inputs, command]
    

    finish_encoding:

}

// Memory Layout
// 0x00 - msg.value
// 0x20 - calldata state pointer
// 0x40 - state memory pointer
// 0x60 - state memory data start
#define macro EXECUTE() = takes (0) returns (0) {
    // Store return data free memory pointer
    0x60 [MEM_STATE_POINTER] mstore                // []

    // Get the number of commands provided, finish if 0
    0x44 calldataload   // [numCommands]

    // Push first and last index locations of command calldata onto stack
    0x20 mul  // [lastCommandOffset]
    0x64 add      // [lastCommandLocation]

    // Store calldata state pointer to the first element in bytes[] calldata array
    dup1 0x40 add [CALLDATA_STATE_POINTER] mstore   // [lastCommandLocation]

    0x64          // [firstIndex, lastCommandLocation]

    // // loop through commands and execute each one
    execute_loop:      // input: [index, lastCommandLocation]
      // load command
      dup1 calldataload          // [command, index, lastCommandLocation]
      // load flags
      dup1 [FUNC_FLAG_MASK] and [FLAG_OFFSET] shr    // [flags, command, index, lastCommandLocation]
      // load calltype from flag
      [FLAG_CT_MASK] and  // [calltype, command, index, lastCommandLocation]

      dup1 [FLAG_CT_CALL] eq do_call jumpi // [isCall, calltype, command, index, lastCommandLocation]
      dup1 [FLAG_CT_STATICCALL] eq do_staticcall jumpi // [isStaticCall, calltype, command, index, lastCommandLocation]
      dup1 [FLAG_CT_VALUECALL] eq do_value_call jumpi // [isStaticCall, calltype, command, index, lastCommandLocation]
      // TODO: InvalidCalltype error
      revert_execution jump

    do_value_call: 
      pop          // [command, index, numCommands]
      dup1 [FUNC_INPUT_MASK] and [INPUT_OFFSET] shr      // [inputs, command, index, numCommands]
      PREPARE_INPUTS_WITH_MSG_VALUE()         // [memStart, memSize, retOffset, retSize, inputs, command]
      BUILD_INPUTS()          // [memStart, memSize, retOffset, retSize, inputs, command]
      0x00 mload              // [value, memStart, memSize, retOffset, retSize, inputs, command]
      dup7 [FUNC_ADDR_MASK] and // [target, value, memStart, memSize, 0, 0, inputs, command]
      gas                       // [gas, target, value, argOffset, argSize, retOffset, retSize]
     // Execute call and revert if not successful
      call                    // [success, inputs, command, index, numCommands]

      iszero revert_execution jumpi
      next_command jump

    do_staticcall:  // [calltype, command, index, numCommands]
      pop     // [command, index, numCommands]
      // load inputs
      dup1 [FUNC_INPUT_MASK] and [INPUT_OFFSET] shr      // [inputs, command, index, numCommands]
      PREPARE_INPUTS()         // [memStart, memSize, retOffset, retSize, inputs, command]
      BUILD_INPUTS()          // [memStart, memSize, retOffset, retSize, inputs, command]
      dup6 [FUNC_ADDR_MASK] and // [target, memStart, memSize, retOffset, retSize, inputs, command]
      gas                       // [gas, target, argOffset, argSize, retOffset, retSize]
      staticcall                    // [success, inputs, command, index, numCommands]

      iszero revert_execution jumpi
      next_command jump

    // CALL
    do_call:  // [calltype, command, index, numCommands]
      pop     // [command, index, numCommands]
      // load inputs
      dup1 [FUNC_INPUT_MASK] and [INPUT_OFFSET] shr      // [inputs, command, index, numCommands]

      PREPARE_INPUTS()         // [memStart, memSize, retOffset, retSize, inputs, command]
      BUILD_INPUTS()          // [memStart, memSize, retOffset, retSize, inputs, command]
      // Push value
      0x00   // [value, memStart, memSize, 0, 0, inputs, command]
      // Push target
      dup7 [FUNC_ADDR_MASK] and // [target, value, memStart, memSize, 0, 0, inputs, command]
      // Set gas
      gas                       // [gas, target, value, argOffset, argSize, retOffset, retSize]

      // Execute call and revert if not successful
      call                    // [success, inputs, command, index, numCommands]
      iszero revert_execution jumpi


    next_command:
      // increment command index and continue loop
      pop pop     // [index, lastCommandLocation]     
      0x20 add    // [index+1, lastCommandLocation]
      dup2 dup2 lt execute_loop jumpi // [index+1 > lastCommandLocation, index+1, lastCommandLocation]


    finish_execution:
        0x00 0x00 return

    // TODO: revert reasons
    revert_execution:
        0x00 0x00 revert
}

#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called.
    0x00 calldataload 0xE0 shr
    dup1 __FUNC_SIG(execute) eq execute jumpi
    dup1 0xde792d5f eq execute jumpi

    // TODO: have fallback?
    // 0x00 0x00 revert

    execute:
        EXECUTE()

}