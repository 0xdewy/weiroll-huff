// #define function execute(bytes32[],bytes[]) nonpayable returns ()

// #define constant FUNC_SIG_MASK = 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000

// // mask to get the 1 byte flag field after the function signature
// #define constant FUNC_FLAG_MASK = 0x00000000FF000000000000000000000000000000000000000000000000000000

// // mask to get the 6 byte input field between the flags and output
// #define constant FUNC_INPUT_MASK = 0x0000000000FFFFFFFFFF000000000000000000000000000000000000000000
// // split the above mask into 6 1 byte masks
// #define constant FUNC_INPUT_0_MASK = 0x0000000000FF00000000000000000000000000000000000000000000000000
// #define constant FUNC_INPUT_1_MASK = 0x000000000000FF000000000000000000000000000000000000000000000000
// #define constant FUNC_INPUT_2_MASK = 0x00000000000000FF0000000000000000000000000000000000000000000000
// #define constant FUNC_INPUT_3_MASK = 0x0000000000000000FF00000000000000000000000000000000000000000000
// #define constant FUNC_INPUT_4_MASK = 0x000000000000000000FF000000000000000000000000000000000000000000
// #define constant FUNC_INPUT_5_MASK = 0x00000000000000000000FF0000000000000000000000000000000000000000


// // mask to get the 1 byte output field between the input field and target address
// #define constant FUNC_OUT_MASK = 0x0000000000000000000000FF0000000000000000000000000000000000000000

// // mask to get the 20 byte target address field after the output field
// #define constant FUNC_ADDR_MASK = 0x000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

// // Flag masks
// #define constant FLAG_TUPLE = 0x80 // 0b10000000
// #define constant FLAG_EXT = 0x40 // 0b01000000
// #define constant FLAG_RESERVED = 0x3F // 0b00111111
// #define constant FLAG_CALLTYPE = 0x01  // 0b00000001

// // Flag values
// #define constant FLAG_CT_DELEGATECALL = 0x00
// #define constant FLAG_CT_CALL = 0x01  // 0b00000001
// #define constant FLAG_CT_STATICCALL = 0x02  // 0b00000010
// #define constant FLAG_CT_VALUECALL = 0x03  // 0b00000011
// #define constant FLAG_CT_MASK = 0x03 // 0b00000011
// #define constant FLAG_EXTENDED_COMMAND = 0x40 // 0b01000000
// #define constant FLAG_TUPLE_RETURN = 0x80 // 0b10000000


// // Input masks
// #define constant INPUT_VAR = 0x80 // 0b10000000
// #define constant INPUT_IDX = 0x7F // 0b01111111

// // Input values
// #define constant END_OF_ARGS = 0xFF // 0b11111111
// #define constant USE_STATE = 0xFE // 0b11111110

/* FLAGS
  0   1   2   3   4   5   6   7
┌───┬───┬───────────────┬────────┐
│tup│ext│   reserved    │calltype│
└───┴───┴───────────────┴────────┘

  0   1   2   3   4   5   6   7
┌───┬───────────────────────────┐
│var│           idx             │
└───┴───────────────────────────
*/

/* Methods */
// Method to extract inputs from 32 byte command
// #define macro BUILD_INPUTS() = takes (3) returns (1) {
    //                        // [inputs, selector, state]
    //  Check if first input is END_OF_ARGS, if so skip function
    // dup1 FUNC_INPUT_0_MASK and  // [input0, inputs, selector, state]
    // dup1 END_OF_ARGS eq finish jumpi

    // finish jump
    // 0x0 iszero finish jumpi


    // finish:
    //     0x00 0x00 return

// }

// // main execute function
// #define macro EXECUTE() = takes (0) returns (0) {
//     // bytes32[] calldata commands, bytes[] calldata state)
//     // Load the commands from calldata
//     0x04 calldataload
//     0x24 calldataload
//     0x44 calldataload

//     // // Extract the flags
//     // dup1 FUNC_FLAG_MASK and

//     // // Extract the inputs
//     // dup1 FUNC_INPUT_MASK and

//     // // Extract the output
//     // dup1 FUNC_OUT_MASK and

//     // // Extract the target address
//     // dup1 FUNC_ADDR_MASK and

//     // Build the inputs
//     // BUILD_INPUTS()
// }

#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called.
    0x00 calldataload 0xE0 shr
    // dup1 __FUNC_SIG(execute) eq execute jumpi
    dup1 0xde792d5f eq execute jumpi

    0x00 0x00 revert

    // execute:
    //     EXECUTE()

}