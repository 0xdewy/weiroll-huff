
#define function mint(address, uint256) payable returns ()
#define function burn(uint256) nonpayable returns ()

#define function mint(address, uint256) payable returns ()
#define function burn(uint256) nonpayable returns ()

#define function safeMint(address to, uint256 tokenId, bytes memory data) payable returns ()
#define function safeMint(address to, uint256 tokenId) payable returns ()

#define macro MINT() = takes (0) returns (0) {
    0x24 calldataload       // [tokenId]
    0x04 calldataload       // [to, tokenId]
    _MINT()
    stop
}

#define macro BURN() = takes (0) returns (0) {
    0x04 calldataload       // [tokenId]
    _BURN()
    stop
}

#define macro SAFE_MINT() = takes (0) returns (0) {
    0x24 calldataload       // [tokenId]
    0x04 calldataload       // [to, tokenId]
    _MINT()

    // Safe Logic
    // Make sure we can transfer to the recipient
    0x04 calldataload       // [to]
    dup1 extcodesize        // [to.code.length, to]
    iszero safe jumpi       // [to]

    // onERC721Received Selector
    0x150b7a02 dup1         // [onERC721Received, onERC721Received, to]
    0xE0 shl                // [onERC721Received_shifted, onERC721Received, to]

    // Store the left-shifted selector for call
    0x20 mstore             // [onERC721Received, to]

    // Store the msg.sender as the first arg
    caller 0x24 mstore      // [onERC721Received, to]

    // Store address(0) as the second arg
    0x00                    // [address(0), onERC721Received, to]
    0x44 mstore             // [onERC721Received, to]

    // Id is the third arg
    0x24 calldataload       // [tokenId, onERC721Received, to]
    0x64 mstore             // [onERC721Received, to]

    // Blank bytes array as 4th arg (no data)
    0x80 0x84 mstore
    0x00 0xA4 mstore

    // Call address(to).onERC721Received(msg.sender, from, tokenId, "")
    0x20                    // [retSize, onERC721Received, to]
    0x00                    // [retOffset, retSize, onERC721Received, to]
    0xA4                    // [argSize, retOffset, retSize, onERC721Received, to]
    dup3                    // [argOffset, argSize, retOffset, retSize, onERC721Received, to]
    dup3                    // [value, argOffset, argSize, retOffset, retSize, onERC721Received, to]
    dup7                    // [to, value, argOffset, argSize, retOffset, retSize, onERC721Received, to]
    gas                     // [gas, to, value, argOffset, argSize, retOffset, retSize, onERC721Received, to]
    call                    // [success, onERC721Received, to]

    // Revert if call isn't successful
    cont jumpi              // [onERC721Received, to]
    0x00 dup1 revert
    cont:

    // Compare the return data to the onERC721Received selector
    0x00 mload 0xE0 shr     // [response, onERC721Received, to]
    eq safe jumpi           // [to]

    // Revert if the return data is not accepted
    UNSAFE_RECIPIENT(0x00)

    // Stop execution if safe
    safe:
    stop
}

#define macro SAFE_MINT_WITH_DATA() = takes (0) returns (0) {
    0x44 calldataload       // [data]
    0x24 calldataload       // [tokenId, data]
    0x04 calldataload       // [to, tokenId, data]
    _MINT()

    // Make sure we can transfer to the recipient
    0x04 calldataload       // [to]
    dup1 extcodesize        // [to.code.length, to]
    iszero safe jumpi       // [to]

    // onERC721Received Selector
    0x150b7a02 dup1         // [onERC721Received, onERC721Received, to]
    0xE0 shl                // [onERC721Received_shifted, onERC721Received, to]

    // Store the left-shifted selector for call
    0x20 mstore             // [onERC721Received, to]

    // Store the msg.sender as the first arg
    caller 0x24 mstore      // [onERC721Received, to]

    // Store address(0) as the second arg
    0x00                    // [address(0), onERC721Received, to]
    0x44 mstore             // [onERC721Received, to]

    // Id is the third arg
    0x24 calldataload       // [tokenId, onERC721Received, to]
    0x64 mstore             // [onERC721Received, to]

    // Store the pointer to the data length
    0x80 0x84 mstore        // [onERC721Received, to]

    0x64 calldataload       // [len(data), onERC721Received, to]
    0x05 shl                // [len(data) * 0x20, onERC721Received, to]
    0x20 add                // [len(data) * 0x20 + 0x20, onERC721Received, to]
    dup1                    // [len(data) * 0x20 + 0x20, len(data) * 0x20 + 0x20, onERC721received, to]
    0x64                    // [0x64, len(data) * 0x20 + 0x20, len(data) * 0x20 + 0x20, onERC721received, to]
    0xA4                    // [0x84, 0x64, len(data) * 0x20 + 0x20, len(data) * 0x20 + 0x20, onERC721received, to]
    calldatacopy            // [len(bytes), onERC721received, to]

    // Call address(to).onERC721Received(msg.sender, from, tokenId, bytes)
    0x20                    // [retSize, len(bytes), onERC721Received, to]
    0x00                    // [retOffset, retSize, len(bytes), onERC721Received, to]
    swap1 swap2             // [len(bytes), retOffset, retSize, onERC721Received, to]
    0x84 add                // [argSize, retOffset, retSize, onERC721Received, to]
    dup3                    // [argOffset, argSize, retOffset, retSize, len(bytes), onERC721Received, to]
    dup3                    // [value, argOffset, argSize, retOffset, retSize, len(bytes), onERC721Received, to]
    dup7                    // [to, value, argOffset, argSize, retOffset, retSize, len(bytes), onERC721Received, to]
    gas                     // [gas, to, value, argOffset, argSize, retOffset, retSize, len(bytes), onERC721Received, to]
    call                    // [success, len(bytes), onERC721Received, to]

    // Revert if call isn't successful
    selector_call_success jumpi              // [len(bytes), onERC721Received, to]
    0x00 dup1 revert
    selector_call_success:

    // Compare the return data to the onERC721Received selector
    0x00 mload 0xE0 shr     // [response, onERC721Received, to]
    eq safe jumpi           // [to]

    // Revert if the return data is not accepted
    UNSAFE_RECIPIENT(0x00)

    // Stop execution if safe
    safe:
    stop

}

// Function Dispatch
#define macro MAIN() = takes (0) returns (0) {
    0x00 calldataload 0xE0 shr  // [sig]

    // Mint and Burning Functions
    dup1 __FUNC_SIG(mint)                       eq mint_jump jumpi
    dup1 __FUNC_SIG(burn)                       eq burn_jump jumpi

    dup1 __FUNC_SIG("safeMint(address,uint256)") eq safe_mint jumpi
    dup1 __FUNC_SIG("safeMint(address,uint256,bytes)") eq safe_mint_with_data jumpi

    dup1 __FUNC_SIG(approve)                    eq approve jumpi
    dup1 __FUNC_SIG(setApprovalForAll)          eq setApprovalForAll jumpi

    dup1 __FUNC_SIG(transferFrom)               eq transferFrom jumpi
    dup1 __FUNC_SIG(safeTransferFrom)           eq safeTransferFrom jumpi

    dup1 __FUNC_SIG(name)                       eq name jumpi
    dup1 __FUNC_SIG(symbol)                     eq symbol jumpi
    dup1 __FUNC_SIG(tokenURI)                   eq tokenURI jumpi
    dup1 __FUNC_SIG(supportsInterface)          eq supportsInterface jumpi

    dup1 __FUNC_SIG(getApproved)                eq getApproved jumpi
    dup1 __FUNC_SIG(isApprovedForAll)           eq isApprovedForAll jumpi

    dup1 __FUNC_SIG(balanceOf)                  eq balanceOf jumpi
    dup1 __FUNC_SIG(ownerOf)                    eq ownerOf jumpi

    dup1 __FUNC_SIG("safeTransferFrom(address,address,uint256,bytes)") eq safeTransferFromData jumpi

    // Revert on failed dispatch
    0x00 dup1 revert

    safe_mint:
        SAFE_MINT()
    safe_mint_with_data:
        SAFE_MINT_WITH_DATA()

    mint_jump:
        MINT()
    burn_jump:
        BURN()

    approve:
        APPROVE()
    setApprovalForAll:
        SET_APPROVAL_FOR_ALL()

    transferFrom:
        TRANSFER_FROM()
    safeTransferFrom:
        SAFE_TRANSFER_FROM()
    safeTransferFromData:
        SAFE_TRANSFER_FROM_WITH_DATA()

    name:
        NAME()
    symbol:
        SYMBOL()
    tokenURI:
        TOKEN_URI()
    supportsInterface:
        SUPPORTS_INTERFACE()

    getApproved:
        GET_APPROVED()
    isApprovedForAll:
        IS_APPROVED_FOR_ALL()

    balanceOf:
        BALANCE_OF()
    ownerOf:
        OWNER_OF()
}
