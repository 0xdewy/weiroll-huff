#define function clone(address) nonpayable returns (address)
#define function cloneDeterministic(address,bytes32) nonpayable returns (address)
#define function predictDeterministicAddress(address,bytes32) view returns (address)
// #define function predictDeterministicAddress(address,bytes32,address) view returns (address)

#define macro CLONE_WRAPPER() = {
    0x04 calldataload                   // [implementation]
    CLONE()                             // [address]
    0x00 mstore                         // []
    0x20 0x00 return                    // return address
}

#define macro CLONE_DETERMINISTIC_WRAPPER() = {
    0x24 calldataload                   // [salt]
    0x04 calldataload                   // [implementation, salt]
    CLONE_DETERMINISTIC()               // [address]
    0x00 mstore                         // []
    0x20 0x00 return                    // return address
}

#define macro PREDICT_DETERMINISTIC_ADDRESS_WRAPPER() = {
    address                                 // [address(this)]
    0x24 calldataload                       // [salt, address(this)]
    0x04 calldataload                       // [implementation, salt, address(this)]
    PREDICT_DETERMINISTIC_ADDRESS(0x40)     // [address]
    0x00 mstore                             // []
    0x20 0x00 return                        // return address
}

#define macro PREDICT_DETERMINISTIC_ADDRESS_DEPLOYER_WRAPPER() = {
    0x44 calldataload                       // [deployer]
    0x24 calldataload                       // [salt, deployer]
    0x04 calldataload                       // [implementation, salt, deployer]
    PREDICT_DETERMINISTIC_ADDRESS(0x40)     // [address]
    0x00 mstore                             // []
    0x20 0x00 return                        // return address
}

#define macro MAIN() = {
    pc calldataload 0xe0 shr

    dup1 __FUNC_SIG(clone)                                                  eq clone_jump jumpi
    dup1 __FUNC_SIG(cloneDeterministic)                                     eq clone_deterministic_jump jumpi
    dup1 __FUNC_SIG(predictDeterministicAddress)                            eq predict_deterministic_address_jump jumpi
    dup1 __FUNC_SIG("predictDeterministicAddress(address,bytes32,address)") eq predict_deterministic_address_deployer_jump jumpi

    // Exit is selector does not match
    0x00 dup1 revert

    clone_jump:
        CLONE_WRAPPER()
    clone_deterministic_jump:
        CLONE_DETERMINISTIC_WRAPPER()
    predict_deterministic_address_jump:
        PREDICT_DETERMINISTIC_ADDRESS_WRAPPER()
    predict_deterministic_address_deployer_jump:
        PREDICT_DETERMINISTIC_ADDRESS_DEPLOYER_WRAPPER()
}